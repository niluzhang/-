package presentation.mainui;

import java.awt.Color;
import java.awt.Component;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.Insets;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollBar;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.border.Border;

import presentation_singleGameGUI.singleGameGUI;

import main.Startup;
import message.*;

public class ModeSelectionPanel extends JPanel {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private ButtonLabel lblNewLabel, lblNewLabel_1, lblNewLabel_2;
	private JPanel panel_2, panel_3;
	private JLabel nameLabel11 = new JLabel("");
	private JLabel nameLabel12 = new JLabel("");
	private JLabel nameLabel21 = new JLabel("");
	private JLabel nameLabel22 = new JLabel("");
	private int clickedFriend = 0;
	private ArrayList<String> choosedFriend = new ArrayList<String>();
	private JButton button = new JButton("发出邀请");

	public ModeSelectionPanel() throws FontFormatException, IOException {
		setSize(847, 381);
		setLayout(null);

		nameLabel11.setBounds(200, 200, 100, 40);
		nameLabel11.setForeground(Color.white);
		add(nameLabel11);

		nameLabel12.setBounds(300, 200, 200, 40);
		nameLabel12.setFont(new Font("微软雅黑", Font.PLAIN, 20));
		nameLabel12.setForeground(Color.white);
		add(nameLabel12);

		nameLabel21.setBounds(200, 250, 100, 40);
		nameLabel21.setForeground(Color.white);
		add(nameLabel21);

		nameLabel22.setBounds(300, 250, 200, 40);
		nameLabel22.setFont(new Font("微软雅黑", Font.PLAIN, 20));
		nameLabel22.setForeground(Color.white);
		add(nameLabel22);

		final InnerPanel panel = new InnerPanel(new Color(7, 20, 36));
		panel.setBounds(187, 10, 471, 161);
		add(panel);
		panel.setLayout(null);

		JPanel panel_1 = new JPanel();
		panel_1.setSize(150, 155);
		panel_1.setLocation(3, 3);
		panel_1.setLayout(null);
		panel_1.setBackground(new Color(0, 0, 0, 0));
		panel.add(panel_1);

		panel_2 = new InnerPanel(new Color(1, 6, 12));
		panel_2.setLocation(157, 3);
		panel_2.setSize(150, 155);
		panel.add(panel_2);

		panel_3 = new InnerPanel(new Color(1, 6, 12));
		panel_3.setLocation(314, 3);
		panel_3.setSize(150, 155);
		panel_3.setLayout(null);
		panel.add(panel_3);

		button.setBounds(550, 200, 200, 40);
		button.setFont(setFont("迷你简太极", 20, 0));
		button.setBackground(new Color(126, 234, 239, 122));
		button.setOpaque(false);
		button.setForeground(Color.white);
		button.setBorder(null);
		button.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				for (int i = 0; i < choosedFriend.size(); i++) {
					System.out.println(choosedFriend.get(i));
				}
				System.out.println();
				// new CoThread().start();
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				setCursor(new Cursor(Cursor.HAND_CURSOR));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}

		});

		lblNewLabel = new ButtonLabel("单机模式");
		lblNewLabel.setBounds(4, 4, 145, 47);
		lblNewLabel.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				lblNewLabel.selected = true;
				lblNewLabel_1.selected = false;
				lblNewLabel_2.selected = false;
				remove(nameLabel11);
				remove(nameLabel12);
				remove(nameLabel21);
				remove(nameLabel22);
				nameLabel22.setText("");
				choosedFriend = new ArrayList<String>();
				clickedFriend = 0;
				panel_2.removeAll();
				panel_3.removeAll();
				remove(button);
				final JLabel l = new JLabel("   开始游戏");
				l.setForeground(Color.white);
				l.setFont(new Font("微软雅黑", Font.PLAIN, 14));
				l.setBounds(5, 5, 140, 45);
				l.addMouseListener(new MouseListener() {

					@Override
					public void mouseClicked(MouseEvent e) {
						// TODO Auto-generated method stub

					}

					@Override
					public void mousePressed(MouseEvent e) {
						// TODO Auto-generated method stub

					}

					@Override
					public void mouseReleased(MouseEvent e) {
						// TODO Auto-generated method stub
						synchronized(Startup.window.mainframe.lock){
							Startup.window.mainframe.frame.dispose();
							singleGameGUI singlegame = new singleGameGUI();
							singlegame.singlenamestart(Startup.window.uif.name);
						}
					}

					@Override
					public void mouseEntered(MouseEvent e) {
						// TODO Auto-generated method stub
						setCursor(new Cursor(Cursor.HAND_CURSOR));
						l.setOpaque(true);
						l.setBackground(new Color(35, 82, 66));
						repaint();
					}

					@Override
					public void mouseExited(MouseEvent e) {
						// TODO Auto-generated method stub
						setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
						l.setOpaque(false);
						repaint();
					}

				});
				panel_2.add(l);
				repaint();
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				setCursor(new Cursor(Cursor.HAND_CURSOR));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}

		});
		panel_1.add(lblNewLabel);

		lblNewLabel_1 = new ButtonLabel("协作模式");
		lblNewLabel_1.setBounds(4, 56, 145, 47);
		lblNewLabel_1.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub
			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseReleased(MouseEvent e) {

				// TODO Auto-generated method stub
				lblNewLabel.selected = false;
				lblNewLabel_1.selected = true;
				lblNewLabel_2.selected = false;
				panel_2.removeAll();
				panel_3.removeAll();
				remove(nameLabel11);
				remove(nameLabel12);
				remove(nameLabel21);
				remove(nameLabel22);
				nameLabel22.setText("");
				choosedFriend = new ArrayList<String>();
				clickedFriend = 0;
				remove(button);
				final JLabel l = new JLabel("   邀请协作");
				l.setForeground(Color.white);
				l.setFont(new Font("微软雅黑", Font.PLAIN, 14));
				l.setBounds(5, 5, 140, 45);
				l.addMouseListener(new MouseListener() {

					@Override
					public void mouseClicked(MouseEvent e) {
						// TODO Auto-generated method stub

						/*
						 * ArrayList<String> data = new ArrayList<String>();
						 * String[] Data = { "3#2014-03-02", "6#2014-03-03",
						 * "8#2014-03-04", "3#2014-03-05", "10#2014-03-06",
						 * "7#2014-03-07", "6#2014-03-08" }; data.add(Data[0]);
						 * data.add(Data[1]); data.add(Data[2]);
						 * data.add(Data[3]);
						 */
						ShowOnlineFriendMessage m1 = new ShowOnlineFriendMessage(
								Startup.window.uif.name);
						Startup.net.sendMessage(m1);
						ArrayList<String> data = ((ShowOnlineFriendBackMessage) Startup.net
								.getMessage(-144)).online_friends;

						int height = 0;
						JPanel friendPanel = new JPanel();
						friendPanel.setPreferredSize(new Dimension(130, data
								.size() * 30));
						friendPanel.setLayout(null);

						for (int i = 0; i < data.size(); i++) {
							final chooseLabel idLabel = new chooseLabel(data
									.get(i));
							idLabel.setHorizontalAlignment(SwingConstants.CENTER);
							idLabel.setBounds(0, height, 130, 30);
							idLabel.setForeground(Color.white);
							height = height + 30;
							idLabel.addMouseListener(new MouseListener() {

								@Override
								public void mouseClicked(MouseEvent e) {
									// TODO Auto-generated method stub
									Font font = null;
									try {
										font = setFont("迷你简太极", 20, 0);
									} catch (FontFormatException e1) {
										// TODO Auto-generated catch block
										e1.printStackTrace();
									} catch (IOException e1) {
										// TODO Auto-generated catch block
										e1.printStackTrace();
									}

									idLabel.changeChooseState();
									if (idLabel.getChooseState() == true) {
										if (clickedFriend < 2) {
											idLabel.setOpaque(true);
											idLabel.setBackground(new Color(35,
													82, 66));
											clickedFriend++;
											choosedFriend.add(idLabel.getText());

											if (choosedFriend.size() == 1) {
												nameLabel11.setText("好友名称：");
												nameLabel12.setText(idLabel
														.getText());
												nameLabel11.setFont(font);
												add(nameLabel11);
												add(nameLabel12);
											} else if (choosedFriend.size() == 2) {
												nameLabel21.setText("好友名称：");
												nameLabel22.setText(idLabel
														.getText());
												nameLabel21.setFont(font);
												add(nameLabel21);
												add(nameLabel22);
											}
										} else {
											idLabel.changeChooseState();
										}
									} else {
										choosedFriend.remove(idLabel.getText());
										idLabel.setOpaque(false);
										clickedFriend--;
										if ((nameLabel22.getText())
												.equals(idLabel.getText())) {
											nameLabel22.setText("");
											remove(nameLabel21);
											remove(nameLabel22);
										} else {
											if (!nameLabel22.getText().equals(
													"")) {
												nameLabel12.setText(nameLabel22
														.getText());
												nameLabel22.setText("");
												remove(nameLabel21);
												remove(nameLabel22);
											} else {
												remove(nameLabel11);
												remove(nameLabel12);
											}
										}
									}

									if (clickedFriend < 1) {
										remove(button);
									} else {
										add(button);
									}

									repaint();
								}

								@Override
								public void mousePressed(MouseEvent e) {
									// TODO Auto-generated method stub

								}

								@Override
								public void mouseReleased(MouseEvent e) {
									// TODO Auto-generated method stub

								}

								@Override
								public void mouseEntered(MouseEvent e) {
									setCursor(new Cursor(Cursor.HAND_CURSOR));
									repaint();
								}

								@Override
								public void mouseExited(MouseEvent e) {
									setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
									repaint();
								}

							});
							friendPanel.add(idLabel);

						}
						friendPanel.setVisible(true);
						friendPanel.setOpaque(false);
						JScrollPane panel7 = new JScrollPane(friendPanel);
						panel7.getViewport().setOpaque(false);// 将JScrollPane设置为透明
						panel7.setOpaque(false);// 将中间的viewport设置为透明
						panel7.setBounds(0, 0, 150, 155);
						JScrollBar bar = panel7.getVerticalScrollBar();
						bar.setBackground(Color.black);

						panel_3.add(panel7);
						repaint();
						// Test.frame.setVisible(true);
						Startup.window.mainframe.frame.setVisible(true);
					}

					@Override
					public void mousePressed(MouseEvent e) {
						// TODO Auto-generated method stub

					}

					@Override
					public void mouseReleased(MouseEvent e) {
						// TODO Auto-generated method stub

					}

					@Override
					public void mouseEntered(MouseEvent e) {
						// TODO Auto-generated method stub
						setCursor(new Cursor(Cursor.HAND_CURSOR));
						l.setOpaque(true);
						l.setBackground(new Color(35, 82, 66));
						repaint();
					}

					@Override
					public void mouseExited(MouseEvent e) {
						// TODO Auto-generated method stub
						setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
						l.setOpaque(false);
						repaint();
					}

				});
				panel_2.add(l);
				repaint();
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				setCursor(new Cursor(Cursor.HAND_CURSOR));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}

		});
		panel_1.add(lblNewLabel_1);

		lblNewLabel_2 = new ButtonLabel("对战模式");
		lblNewLabel_2.setBounds(4, 108, 145, 47);
		lblNewLabel_2.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub
				lblNewLabel.selected = false;
				lblNewLabel_1.selected = false;
				lblNewLabel_2.selected = true;
				panel_2.removeAll();
				panel_3.removeAll();
				remove(nameLabel11);
				remove(nameLabel12);
				remove(nameLabel21);
				remove(nameLabel22);
				nameLabel22.setText("");
				clickedFriend = 0;
				choosedFriend = new ArrayList<String>();
				remove(button);
				final JLabel l = new JLabel("   邀请PK");
				l.setForeground(Color.white);
				l.setFont(new Font("微软雅黑", Font.PLAIN, 14));
				l.setBounds(5, 5, 140, 45);
				l.addMouseListener(new MouseListener() {

					@Override
					public void mouseClicked(MouseEvent e) {
						// TODO Auto-generated method stub

					}

					@Override
					public void mousePressed(MouseEvent e) {
						// TODO Auto-generated method stub

					}

					@Override
					public void mouseReleased(MouseEvent e) {
						// TODO Auto-generated method stub

					}

					@Override
					public void mouseEntered(MouseEvent e) {
						// TODO Auto-generated method stub
						setCursor(new Cursor(Cursor.HAND_CURSOR));
						l.setOpaque(true);
						l.setBackground(new Color(35, 82, 66));
						repaint();
					}

					@Override
					public void mouseExited(MouseEvent e) {
						// TODO Auto-generated method stub
						setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
						l.setOpaque(false);
						repaint();
					}

				});
				panel_2.add(l);
				repaint();
			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
				setCursor(new Cursor(Cursor.HAND_CURSOR));
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub
				setCursor(new Cursor(Cursor.DEFAULT_CURSOR));
			}

		});
		panel_1.add(lblNewLabel_2);

	}

	public void paintComponent(Graphics g) {
		Image image = new ImageIcon(
				MainFrame.class.getResource("/img/body.jpg")).getImage();
		g.drawImage(image, 0, 0, getWidth(), getHeight(), this);
	}

	public class InnerPanel extends JPanel {

		Color color;

		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;

		public InnerPanel(Color c) {
			color = c;
			setLayout(null);
			setBorder(new Border() {

				@Override
				public void paintBorder(Component c, Graphics g, int x, int y,
						int width, int height) {
					// TODO Auto-generated method stub
					g.setColor(new Color(58, 69, 87));
					g.drawRoundRect(0, 0, width - 1, height - 1, 5, 5);
				}

				@Override
				public Insets getBorderInsets(Component c) {
					// TODO Auto-generated method stub
					return new Insets(1, 1, 1, 1);
				}

				@Override
				public boolean isBorderOpaque() {
					// TODO Auto-generated method stub
					return true;
				}

			});
		}

		public void paintComponent(Graphics g) {
			g.setColor(color);
			g.fillRoundRect(0, 0, getWidth() - 1, getHeight() - 1, 5, 5);
		}

	}

	private Font setFont(String fileName, int size, int font)
			throws FontFormatException, IOException {
		File file = new File(fileName + ".ttf");
		FileInputStream fi = new FileInputStream(file);
		BufferedInputStream fb = new BufferedInputStream(fi);
		Font nf = Font.createFont(Font.TRUETYPE_FONT, fb);
		switch (font) {
		case (0):
			nf = nf.deriveFont(Font.PLAIN, size);
		case (1):
			nf = nf.deriveFont(Font.BOLD, size);
		case (2):
			nf = nf.deriveFont(Font.ITALIC, size);
		}

		nf = nf.deriveFont(Font.PLAIN, size);

		return nf;
	}

	public class chooseLabel extends JLabel {

		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;

		public boolean chooseState = false;
		public String name;

		public chooseLabel(String name) {
			this.name = name;
			setText(name);
		}

		public boolean getChooseState() {
			return chooseState;
		}

		public void changeChooseState() {
			if (chooseState == false) {
				chooseState = true;
			} else {
				chooseState = false;
			}
		}

	}

	public class CoThread extends Thread {
		public void run() {
			CooperateRequestMessage m1 = new CooperateRequestMessage(
					Startup.window.uif.name, choosedFriend);
			Startup.net.sendMessage(m1);
			PartenerBackMessage pbm = (PartenerBackMessage) (Startup.net
					.getMessage(-170000));
			switch (pbm.back) {
			case "no":
				// 拒绝提示
				break;
			case "ok":
				//
				break;
			}
		}
	}

}
