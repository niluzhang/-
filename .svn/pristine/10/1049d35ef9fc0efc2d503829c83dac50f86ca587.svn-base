package presentation.rankui;

import java.awt.Color;
import java.awt.Font;
import java.awt.FontFormatException;
import java.awt.Graphics;
import java.awt.Image;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.*;

import main.Startup;
import message.CooperateRequestMessage;
import message.GetRankListBackMessage;
import message.GetRankListMessage;
import message.PartenerBackMessage;

public class RankUI {

	private JFrame frame;
	private int frameFirstX, frameFirstY;
	private JPanel rankPanel;
	private int totalPage = 0;
	private int currentPage = 0;

	public RankUI() throws FontFormatException, IOException {
		frame = new JFrame();

		setRank();
	}

	public void setFrame() throws FontFormatException, IOException {
		frame.setBounds(400, 20, 550, 740);
		frame.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		frame.setLayout(null);
		frame.setUndecorated(true);
		frame.setBackground(Color.black);

		frame.addMouseMotionListener(new MouseMotionListener() {
			public void mouseMoved(MouseEvent e) {
			}

			public void mouseDragged(MouseEvent e) {
				int detX = e.getX() - frameFirstX;
				int detY = e.getY() - frameFirstY;
				frame.setBounds(frame.getX() + detX, frame.getY() + detY,
						frame.getWidth(), frame.getHeight());
			}
		});
		frame.addMouseListener(new MouseListener() {
			public void mouseExited(MouseEvent e) {
			}

			public void mouseReleased(MouseEvent e) {
			}

			public void mouseClicked(MouseEvent e) {
			}

			public void mouseEntered(MouseEvent e) {
			}

			public void mousePressed(MouseEvent e) {
				frameFirstX = e.getX();
				frameFirstY = e.getY();
			}
		});

		JPanel panel = new JPanel();
		panel.setBounds(0, 0, 550, 740);
		panel.setOpaque(false);
		panel.setLayout(null);

		Image image0 = new ImageIcon("src/bin/paper.jpg").getImage();
		JLabel l0 = new aLabel(image0, 550, 740);
		l0.setBounds(0, 0, 550, 740);

		Image image1 = new ImageIcon("src/bin/gold1.png").getImage();
		JLabel l1 = new aLabel(image1, 300, 105);
		l1.setBounds(125, 630, 300, 105);

		Image image2 = new ImageIcon("src/bin/gold2.png").getImage();
		JLabel l2 = new aLabel(image2, 100, 85);
		l2.setBounds(435, 50, 100, 85);

		Image image3 = new ImageIcon("src/bin/gold3.png").getImage();
		JLabel l3 = new aLabel(image3, 300, 71);
		l3.setBounds(125, 0, 300, 71);

		Image image4 = new ImageIcon("src/bin/gold4.png").getImage();
		JLabel l4 = new aLabel(image4, 100, 85);
		l4.setBounds(15, 50, 100, 85);

		Image image5 = new ImageIcon("src/bin/gold5.png").getImage();
		JLabel l5 = new aLabel(image5, 85, 100);
		l5.setBounds(450, 590, 85, 100);

		Image image6 = new ImageIcon("src/bin/gold6.png").getImage();
		JLabel l6 = new aLabel(image6, 85, 100);
		l6.setBounds(15, 590, 85, 100);

		JLabel title = new JLabel("ÅÅÐÐ°ñ");
		Font nf1 = setFont("ÃÔÄã¼ò²Êµû", 50);
		nf1.deriveFont(Font.BOLD, 60);
		title.setFont(nf1);
		title.setForeground(new Color(249, 230, 0));
		title.setForeground(Color.red);
		title.setHorizontalAlignment(SwingConstants.CENTER);
		title.setBounds(125, 50, 300, 100);

		Font nf3 = setFont("ÃÔÄã¼òÌ«¼«", 20);
		JLabel label1 = new JLabel("ÅÅÃû");
		label1.setFont(nf3);
		label1.setForeground(new Color(79, 87, 253));
		label1.setHorizontalAlignment(SwingConstants.CENTER);
		label1.setBounds(50, 140, 150, 40);

		JLabel label2 = new JLabel("Ãû³Æ");
		label2.setFont(nf3);
		label2.setForeground(new Color(79, 87, 253));
		label2.setHorizontalAlignment(SwingConstants.CENTER);
		label2.setBounds(200, 140, 150, 40);

		JLabel label3 = new JLabel("µÃ·Ö");
		label3.setFont(nf3);
		label3.setForeground(new Color(79, 87, 253));
		label3.setHorizontalAlignment(SwingConstants.CENTER);
		label3.setBounds(350, 140, 150, 40);

		JLabel exitLabel = new JLabel("x");
		Font nf2 = setFont("curlytype", 50);
		exitLabel.setHorizontalAlignment(SwingConstants.CENTER);
		exitLabel.setFont(nf2);
		exitLabel.setBounds(500, 0, 40, 40);
		exitLabel.setForeground(Color.RED);
		exitLabel.addMouseListener(new MouseListener() {
			public void mouseClicked(MouseEvent e) {
				frame.dispose();
			}

			public void mousePressed(MouseEvent e) {
			}

			public void mouseReleased(MouseEvent e) {
			}

			public void mouseExited(MouseEvent e) {
			}

			public void mouseEntered(MouseEvent e) {
			}
		});

		panel.add(exitLabel);
		panel.add(l1);
		panel.add(l2);
		panel.add(l3);
		panel.add(l4);
		panel.add(l5);
		panel.add(l6);
		panel.add(title);
		panel.add(label1);
		panel.add(label2);
		panel.add(label3);
		panel.add(rankPanel);
		panel.add(l0);
		panel.repaint();

		frame.add(panel);
		frame.setVisible(true);
		frame.repaint();
	}

	private void setRank() throws FontFormatException, IOException {
		rankPanel = new JPanel();
		rankPanel.setLayout(null);
		rankPanel.setOpaque(false);
		rankPanel.setBounds(50, 180, 450, 600);

		final JPanel helpPanel = new JPanel();
		helpPanel.setBounds(0, 0, 450, 400);
		helpPanel.setLayout(null);
		helpPanel.setOpaque(false);

		/*
		ArrayList<String> data = new ArrayList<String>();
		String[] Data = { "1#2100", "2#2100", "3#2100", "4#2100", "5#2100",
				"6#2100", "7#2100", "8#2100", "9#2100", "10#2100", "11#2100" };
		data.add(Data[0]);
		data.add(Data[1]);
		data.add(Data[2]);
		data.add(Data[3]);
		data.add(Data[4]);
		data.add(Data[5]);
		data.add(Data[6]);
		data.add(Data[7]);
		data.add(Data[8]);
		data.add(Data[9]);
		data.add(Data[10]);
		*/
		
		GetRankListMessage m1 = new GetRankListMessage(Startup.window.uif.name);
		Startup.net.sendMessage(m1);
		
		GetRankListBackMessage grlbm = (GetRankListBackMessage) (Startup.net
				.getMessage(-777));
		
		ArrayList<String> data = grlbm.rankList;
		// ÉèÖÃpagePanel
		if (data.size() % 10 == 0) {
			totalPage = data.size() / 10;
		} else {
			totalPage = data.size() / 10 + 1;
		}
		final ArrayList<JPanel> pagePanel = new ArrayList<JPanel>();
		for (int pagenumber = 0; pagenumber < totalPage; pagenumber++) {
			int height = 0;
			JPanel innerPanel = new JPanel();
			innerPanel.setLayout(null);
			innerPanel.setOpaque(false);
			innerPanel.setBounds(0, 0, 450, 400);
			pagePanel.add(innerPanel);
			if (pagenumber == 0) {
				int dataSize = 0;
				if (totalPage == 1) {
					dataSize = data.size() - 1;
				} else {
					dataSize = 10;
				}
				for (int q = 0; q < dataSize; q++) {
					switch (q) {
					case 0:
						Image image1 = new ImageIcon("src/bin/first.png")
								.getImage();
						JLabel l1 = new aLabel(image1, 40, 40);
						l1.setBounds(55, height, 40, 40);
						innerPanel.add(l1);
						break;
					case 1:
						Image image2 = new ImageIcon("src/bin/second.png")
								.getImage();
						JLabel l2 = new aLabel(image2, 40, 39);
						l2.setBounds(55, height, 40, 39);
						innerPanel.add(l2);
						break;
					case 2:
						Image image3 = new ImageIcon("src/bin/third.png")
								.getImage();
						JLabel l3 = new aLabel(image3, 40, 40);
						l3.setBounds(55, height, 40, 40);
						innerPanel.add(l3);
						break;
					default:
						JLabel rankLabel = new JLabel(Integer.toString(q + 1));
						rankLabel.setBounds(0, height, 150, 40);
						rankLabel.setHorizontalAlignment(SwingConstants.CENTER);
						Font font = setFont("2203", 20);
						rankLabel.setFont(font);
						rankLabel.setForeground(new Color(251, 112, 28));
						innerPanel.add(rankLabel);
						break;
					}
					String rank[] = data.get(q).split("#");
					JLabel nameLabel = new JLabel(rank[0]);
					nameLabel.setHorizontalAlignment(SwingConstants.CENTER);
					JLabel scoreLabel = new JLabel(rank[1]);
					scoreLabel.setHorizontalAlignment(SwingConstants.CENTER);
					nameLabel.setBounds(150, height, 150, 40);
					nameLabel.setFont(new Font("ºÚÌå", Font.BOLD, 15));
					scoreLabel.setBounds(300, height, 150, 40);
					scoreLabel.setFont(setFont("22203", 15));
					height = height + 40;

					pagePanel.get(pagenumber).add(nameLabel);
					pagePanel.get(pagenumber).add(scoreLabel);
					pagePanel.get(pagenumber).setVisible(true);
					pagePanel.get(pagenumber).repaint();
				}
			} else {
				int dataSize = 0;
				if (pagenumber < totalPage - 1) {
					dataSize = 10;
				} else {
					dataSize = totalPage % 10 - 1;
				}
				for (int q = 0; q < dataSize; q++) {
					JLabel rankLabel = new JLabel(Integer.toString(pagenumber)
							+ Integer.toString(q + 1));
					rankLabel.setBounds(0, height, 150, 40);
					rankLabel.setHorizontalAlignment(SwingConstants.CENTER);
					Font font = setFont("2203", 20);
					rankLabel.setFont(font);
					rankLabel.setForeground(new Color(251, 112, 28));
					innerPanel.add(rankLabel);

					String rank[] = data.get(pagenumber * 10 + q).split("#");
					JLabel nameLabel = new JLabel(rank[0]);
					nameLabel.setHorizontalAlignment(SwingConstants.CENTER);
					JLabel scoreLabel = new JLabel(rank[1]);
					scoreLabel.setHorizontalAlignment(SwingConstants.CENTER);
					nameLabel.setBounds(150, height, 150, 40);
					nameLabel.setFont(new Font("ºÚÌå", Font.BOLD, 15));
					scoreLabel.setBounds(300, height, 150, 40);
					scoreLabel.setFont(setFont("22203", 15));
					height = height + 40;

					pagePanel.get(pagenumber).add(nameLabel);
					pagePanel.get(pagenumber).add(scoreLabel);
					pagePanel.get(pagenumber).setVisible(true);
					pagePanel.get(pagenumber).repaint();
				}
			}
		}

		// ÉèÖÃÑ¡Ôñpanel
		Image image1 = new ImageIcon("src/bin/jumpleft.png").getImage();
		final JLabel l1 = new aLabel(image1, 40, 40);
		l1.setBounds(120, 410, 40, 40);
		Image image2 = new ImageIcon("src/bin/jumpright.png").getImage();
		JLabel l2 = new aLabel(image2, 40, 40);
		l2.setBounds(290, 410, 40, 40);

		final JLabel pageLabel = new JLabel(Integer.toString(currentPage + 1)
				+ "/" + Integer.toString(totalPage));
		pageLabel.setHorizontalAlignment(SwingConstants.CENTER);
		pageLabel.setBounds(160, 410, 130, 40);
		l1.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub
				if (currentPage != 0) {
					helpPanel.removeAll();
					helpPanel.add(pagePanel.get(currentPage - 1));
					helpPanel.repaint();
					currentPage = currentPage - 1;
					rankPanel.remove(pageLabel);
					pageLabel.setText(Integer.toString(currentPage + 1) + "/"
							+ Integer.toString(totalPage));
					rankPanel.add(pageLabel);
					rankPanel.repaint();
				}
			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub
			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub

			}

		});
		l2.addMouseListener(new MouseListener() {

			@Override
			public void mouseClicked(MouseEvent e) {
				// TODO Auto-generated method stub
				if (currentPage != totalPage - 1) {
					helpPanel.removeAll();
					helpPanel.add(pagePanel.get(currentPage + 1));
					helpPanel.repaint();
					currentPage = currentPage + 1;
					rankPanel.remove(pageLabel);
					pageLabel.setText(Integer.toString(currentPage + 1) + "/"
							+ Integer.toString(totalPage));
					rankPanel.add(pageLabel);
					rankPanel.repaint();
				}
			}

			@Override
			public void mousePressed(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseReleased(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseEntered(MouseEvent e) {
				// TODO Auto-generated method stub

			}

			@Override
			public void mouseExited(MouseEvent e) {
				// TODO Auto-generated method stub

			}

		});
		helpPanel.add(pagePanel.get(0));
		helpPanel.repaint();
		rankPanel.add(pageLabel);
		rankPanel.add(l1);
		rankPanel.add(l2);
		rankPanel.add(helpPanel);

	}

	private Font setFont(String fileName, int size) throws FontFormatException,
			IOException {
		File file = new File(fileName + ".ttf");
		FileInputStream fi = new FileInputStream(file);
		BufferedInputStream fb = new BufferedInputStream(fi);
		Font nf = Font.createFont(Font.TRUETYPE_FONT, fb);
		nf = nf.deriveFont(Font.PLAIN, size);

		return nf;
	}

	private class aLabel extends JLabel {
		/**
		 * 
		 */
		private static final long serialVersionUID = 1L;
		private Image image;
		private int x;
		private int y;

		public aLabel(final Image image, int x, int y) {
			this.image = image;
			this.x = x;
			this.y = y;
		}

		@Override
		public void paintComponent(Graphics g) {
			super.paintComponent(g);

			g.drawImage(image, 0, 0, x, y, null);
		}
	}

}
