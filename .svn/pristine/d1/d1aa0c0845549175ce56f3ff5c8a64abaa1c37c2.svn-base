package presentation.gameui;

//注意事项：
//         重点
//此处接受消息不能出现等待，如果接收不到就跳过继续刷新
//网络添加有两处
import game.Position;
import gamemessage.CorpGetStateMessage;
import gamemessage.FinishDropMessage;
import gamemessage.GameStateMessage;
import gamemessage.SingleDirectremoveMessage;

import java.io.IOException;
import java.util.ArrayList;

import main.Startup;
import net.Net;

public class collaborationGameGUI_updateThread extends Thread {
	collaborationGameGUI game;

	public collaborationGameGUI_updateThread(collaborationGameGUI game) {
		this.game = game;
	}

	@Override
	public void run() {
		int number = 0;
		while (true) {
			game.frame.repaint();
			game.frame.validate();
			synchronized (game.pVlock) {
				game.pVlock.notifyAll();
				try {
				sleep(5);
			} catch (InterruptedException e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
               game.isStateReceibe=false;
				// 发送项初始化 获取协作游戏状态 例如分数 时间
               if(game.iscansendstate){
				CorpGetStateMessage sendms = new CorpGetStateMessage();
				game.sendnumber++;
				System.out.println("gamestaet thread 开启");
				sendms.UserID = game.ID;
				// System.out.println("为何床布景区"+sendms.UserID);
				// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&7&&&&&&&&&&77
				// 发送接受游戏状态的请求
				// 发送消息类型：121 发送给服务器 接受游戏状态请求
				Startup.net.sendMessage(sendms);
               
				// &&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
				// 接受游戏状态 来自服务器
				// 接受消息类型：100 返回的是游戏状态例如时间分数
				System.out.println("位置一");

				GameStateMessage message = (GameStateMessage) Startup.net
						.getMessage(100);
				System.out.println("接受kAISHI");

				// 数据的接受
				if (message != null) {
					game.isStateReceibe=true;
					game.receivenumber++;
					game.doublehitCount = message.CurrentGameState.Lianji;
					game.doublehitState = message.CurrentGameState.InSuperState;
					game.grade = message.CurrentGameState.TotalGrade;
					game.time = message.CurrentGameState.Time;
					if(message.CurrentGameState.NeedUseTool_E){
						if(game.dropdirection==2){
						ArrayList<Position> psi=message.CurrentGameState.Tool_E;
						game.remindx1=psi.get(0).Row;
						game.remindy1=psi.get(0).Column;
						game.remindx2=psi.get(1).Row;
						game.remindy2=psi.get(1).Column;
						}else{
							ArrayList<Position> psi=message.CurrentGameState.Tool_E;
							game.remindy1=psi.get(0).Row;
							game.remindx1=psi.get(0).Column;
							game.remindy2=psi.get(1).Row;
							game.remindx2=psi.get(1).Column;	
						
					}
					}else{
						game.remindx1=-1;
						game.remindy1=-1;
						game.remindx2=-1;
						game.remindy2=-1;
					}
					
				} else {
					System.out.println("update thread 获取为空陷入等待");
					game.isStateReceibe=false;
				}

               }

				try {
					game.pVlock.wait();
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
		}
	}
}
